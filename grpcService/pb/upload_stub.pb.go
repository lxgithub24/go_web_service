// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload_stub.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	upload_stub.proto

It has these top-level messages:
	GetRequest
	StubInfo
	ResponseStub
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
	Stub string `protobuf:"bytes,1,opt,name=stub" json:"stub,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetStub() string {
	if m != nil {
		return m.Stub
	}
	return ""
}

type StubInfo struct {
	FileGcid string `protobuf:"bytes,1,opt,name=file_gcid,json=fileGcid" json:"file_gcid,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (m *StubInfo) Reset()                    { *m = StubInfo{} }
func (m *StubInfo) String() string            { return proto.CompactTextString(m) }
func (*StubInfo) ProtoMessage()               {}
func (*StubInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StubInfo) GetFileGcid() string {
	if m != nil {
		return m.FileGcid
	}
	return ""
}

func (m *StubInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type ResponseStub struct {
	Results []*StubInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ResponseStub) Reset()                    { *m = ResponseStub{} }
func (m *ResponseStub) String() string            { return proto.CompactTextString(m) }
func (*ResponseStub) ProtoMessage()               {}
func (*ResponseStub) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseStub) GetResults() []*StubInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "protobuf.GetRequest")
	proto.RegisterType((*StubInfo)(nil), "protobuf.StubInfo")
	proto.RegisterType((*ResponseStub)(nil), "protobuf.ResponseStub")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UploadStub service

type UploadStubClient interface {
	QueryStubInfo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ResponseStub, error)
}

type uploadStubClient struct {
	cc *grpc.ClientConn
}

func NewUploadStubClient(cc *grpc.ClientConn) UploadStubClient {
	return &uploadStubClient{cc}
}

func (c *uploadStubClient) QueryStubInfo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ResponseStub, error) {
	out := new(ResponseStub)
	err := grpc.Invoke(ctx, "/protobuf.UploadStub/QueryStubInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UploadStub service

type UploadStubServer interface {
	QueryStubInfo(context.Context, *GetRequest) (*ResponseStub, error)
}

func RegisterUploadStubServer(s *grpc.Server, srv UploadStubServer) {
	s.RegisterService(&_UploadStub_serviceDesc, srv)
}

func _UploadStub_QueryStubInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadStubServer).QueryStubInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UploadStub/QueryStubInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadStubServer).QueryStubInfo(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadStub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.UploadStub",
	HandlerType: (*UploadStubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryStubInfo",
			Handler:    _UploadStub_QueryStubInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload_stub.proto",
}

func init() { proto.RegisterFile("upload_stub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2d, 0xc8, 0xc9,
	0x4f, 0x4c, 0x89, 0x2f, 0x2e, 0x29, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00,
	0x53, 0x49, 0xa5, 0x69, 0x4a, 0x0a, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x20, 0x55, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60,
	0xb6, 0x92, 0x0b, 0x17, 0x47, 0x70, 0x49, 0x69, 0x92, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x34, 0x17,
	0x67, 0x5a, 0x66, 0x4e, 0x6a, 0x7c, 0x7a, 0x72, 0x66, 0x0a, 0x54, 0x11, 0x07, 0x48, 0xc0, 0x3d,
	0x39, 0x33, 0x05, 0x2e, 0x99, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x84, 0x90, 0xf4, 0x4b, 0xcc, 0x4d,
	0x55, 0xb2, 0xe1, 0xe2, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x05, 0x99, 0x26, 0xa4,
	0xc3, 0xc5, 0x5e, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d,
	0x24, 0xa4, 0x07, 0x73, 0x93, 0x1e, 0xcc, 0xba, 0x20, 0x98, 0x12, 0x23, 0x5f, 0x2e, 0xae, 0x50,
	0xb0, 0x27, 0xc0, 0x7a, 0xed, 0xb9, 0x78, 0x03, 0x4b, 0x53, 0x8b, 0x2a, 0xe1, 0xce, 0x12, 0x41,
	0xe8, 0x45, 0x78, 0x46, 0x4a, 0x0c, 0x21, 0x8a, 0x6c, 0xb5, 0x12, 0x43, 0x12, 0x1b, 0x58, 0xc2,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x88, 0x60, 0x23, 0x1a, 0x01, 0x00, 0x00,
}
